{"version":3,"sources":["pages/GOL/index.tsx"],"names":["operations","generateEmptyGrid","rows","i","push","Array","from","GameOfLife","_useState","useState","_useState2","Object","C_works_proj_game_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","grid","setGrid","_useState3","_useState4","running","setRunning","runningRef","useRef","current","runSimulation","useCallback","g","produce","gridCopy","_loop","_loop2","k","neighbors","forEach","_ref","_ref2","x","y","newI","newK","setTimeout","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","Fragment","onClick","Math","random","style","display","gridTemplateColumns","concat","map","col","key","newGrid","width","height","backgroundColor","undefined","border"],"mappings":"sIAOMA,EAAa,CACf,CAAC,EAAG,GACJ,CAAC,GAAI,GACL,CAAC,GAAI,GACL,EAAE,EAAG,GACL,CAAC,EAAG,GACJ,EAAE,GAAI,GACN,CAAC,EAAG,GACJ,EAAE,EAAG,IAGHC,EAAoB,WAEtB,IADA,IAAMC,EAAO,GACJC,EAAI,EAAGA,EAhBJ,GAgBiBA,IACzBD,EAAKE,KAAKC,MAAMC,KAAKD,MAhBb,IAgB6B,kBAAM,KAG/C,OAAOH,GA2FIK,UAvFc,WAAM,IAAAC,EACPC,mBAAS,WAC7B,OAAOR,MAFoBS,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACxBK,EADwBH,EAAA,GAClBI,EADkBJ,EAAA,GAAAK,EAIDN,oBAAS,GAJRO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAIxBE,EAJwBD,EAAA,GAIfE,EAJeF,EAAA,GAKzBG,EAAaC,iBAAOH,GAC1BE,EAAWE,QAAUJ,EACrB,IAAMK,EAAgBC,sBAAY,WACrBJ,EAAWE,UAGhBP,EAAQ,SAACU,GACL,OAAOC,YAAQD,EAAG,SAAAE,GACd,IAD0B,IAAAC,EAAA,SACjBxB,GACL,IAFsB,IAAAyB,EAAA,SAEbC,GACL,IAAIC,EAAY,EAChB9B,EAAW+B,QAAQ,SAAAC,GAAW,IAAAC,EAAAtB,OAAAC,EAAA,EAAAD,CAAAqB,EAAA,GAATE,EAASD,EAAA,GAAPE,EAAOF,EAAA,GACpBG,EAAOjC,EAAI+B,EACXG,EAAOR,EAAIM,EACdC,GAAQ,GAAKA,EA3ChC,IA2CkDC,GAAQ,GAAKA,EA1C/D,KA2CoBP,GAAaN,EAAEY,GAAMC,MAGzBP,EAAY,GAAKA,EAAY,EAC7BJ,EAASvB,GAAG0B,GAAK,EACE,IAAZL,EAAErB,GAAG0B,IAA0B,IAAdC,IACxBJ,EAASvB,GAAG0B,GAAK,IAZhBA,EAAI,EAAGA,EAtCxB,GAsCqCA,IAAKD,EAAzBC,IADJ1B,EAAI,EAAGA,EArCpB,GAqCiCA,IAAKwB,EAAzBxB,OAqBlBmC,WAAWhB,EAAe,OAC9B,IACH,OACGiB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACCH,EAAAC,EAAAC,cAAA,UAAQE,QAAS,WACbzB,GAAYD,GACPA,IACDE,EAAWE,SAAU,EACrBC,OAGHL,EAAU,OAAS,SAExBsB,EAAAC,EAAAC,cAAA,UAAQE,QAAS,WAAO7B,EAAQb,OAAhC,SACAsC,EAAAC,EAAAC,cAAA,UAAQE,QAAS,WAEb,IADA,IAAMzC,EAAO,GACJC,EAAI,EAAGA,EA1EZ,GA0EyBA,IACzBD,EAAKE,KAAKC,MAAMC,KAAKD,MA1ErB,IA0EqC,kBAAMuC,KAAKC,SAAW,IAAO,EAAI,KAG1E/B,EAAQZ,KANZ,UAWAqC,EAAAC,EAAAC,cAAA,OAAKK,MAAO,CACRC,QAAS,OACTC,oBAAmB,UAAAC,OApFf,GAoFe,aAElBpC,EAAKqC,IAAI,SAAChD,EAAMC,GAAP,OACND,EAAKgD,IAAI,SAACC,EAAKtB,GAAN,OACLU,EAAAC,EAAAC,cAAA,OACIW,IAAG,GAAAH,OAAK9C,EAAL,KAAA8C,OAAUpB,GACbc,QAAS,WACL,IAAMU,EAAU5B,YAAQZ,EAAM,SAAAa,GAC1BA,EAASvB,GAAG0B,GAAKhB,EAAKV,GAAG0B,GAAK,EAAI,IAEtCf,EAAQuC,IAEZP,MAAO,CACHQ,MAAO,GACPC,OAAQ,GACRC,gBAAiB3C,EAAKV,GAAG0B,GAAK,YAAS4B,EACvCC,OAAQ","file":"static/js/9.42506897.chunk.js","sourcesContent":["import React, { useState, useCallback, useRef } from 'react';\nimport produce from 'immer';\nimport * as S from './styled';\n\nconst numRows = 50;\nconst numCols = 50;\n\nconst operations = [\n    [0, 1],\n    [0, -1],\n    [1, -1],\n    [-1, 1],\n    [1, 1],\n    [-1, -1],\n    [1, 0],\n    [-1, 0]\n];\n\nconst generateEmptyGrid = () => {\n    const rows = [];\n    for (let i = 0; i < numRows; i++) {\n        rows.push(Array.from(Array(numCols), () => 0))\n    }\n\n    return rows;\n}\n\n\nconst GameOfLife: React.FC = () => {\n    const [grid, setGrid] = useState(() => {\n        return generateEmptyGrid();\n    })\n    const [running, setRunning] = useState(false);\n    const runningRef = useRef(running);\n    runningRef.current = running;\n    const runSimulation = useCallback(() => {\n            if (!runningRef.current) {\n                return;\n            }\n            setGrid((g) => {\n                return produce(g, gridCopy => {\n                    for (let i = 0; i < numRows; i ++){\n                        for (let k = 0; k < numRows; k ++){\n                            let neighbors = 0;\n                            operations.forEach(([x,y]) => {\n                                const newI = i + x;\n                                const newK = k + y;\n                                if(newI >= 0 && newI < numRows && newK >= 0 && newK < numCols) {\n                                    neighbors += g[newI][newK];\n                                }\n                            })\n                            if (neighbors < 2 || neighbors > 3) {\n                                gridCopy[i][k] = 0;\n                            } else if (g[i][k] === 0 && neighbors === 3) {\n                                gridCopy[i][k] = 1;\n                            }\n                        }\n                    }\n                })\n            })\n            \n           //simulate\n           setTimeout(runSimulation, 100) \n    }, [])\n    return (\n       <>\n        <button onClick={() => {\n            setRunning(!running);\n            if (!running) {\n                runningRef.current = true;\n                runSimulation();\n            }\n        }}>\n            {running ? 'stop' : 'start'}\n        </button>\n        <button onClick={() => {setGrid(generateEmptyGrid())}}>clear</button>\n        <button onClick={() => {\n            const rows = [];\n            for (let i = 0; i < numRows; i++) {\n                rows.push(Array.from(Array(numCols), () => Math.random() > 0.75 ? 1 : 0))\n            }\n        \n            setGrid(rows);\n        }}>\n            random\n        </button>\n        \n        <div style={{\n            display: 'grid',\n            gridTemplateColumns: `repeat(${numCols}, 20px)`\n        }}>\n            {grid.map((rows, i) =>\n                rows.map((col, k) => (\n                    <div\n                        key={`${i}-${k}`}\n                        onClick={() => {\n                            const newGrid = produce(grid, gridCopy => {\n                                gridCopy[i][k] = grid[i][k] ? 0 : 1;\n                            })\n                            setGrid(newGrid)\n                        }}\n                        style={{\n                            width: 20,\n                            height: 20,\n                            backgroundColor: grid[i][k] ? 'pink' : undefined,\n                            border: 'solid 1px black'\n                        }}\n                    />\n                ))\n            )}\n        </div>\n       </>\n    )\n}\n\nexport default GameOfLife;"],"sourceRoot":""}